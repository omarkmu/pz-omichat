VERSION = 1,


/* Basic Features */
option OmiChat.EnableCustomShouts
{
    type = boolean,
    default = true,
    page = OmiChat,
    translation = OCEnableCustomShouts,
}

option OmiChat.EnableEmotes
{
    type = boolean,
    default = true,
    page = OmiChat,
    translation = OCEnableEmotes,
}

option OmiChat.EnableSetNameColor
{
    type = boolean,
    default = false,
    page = OmiChat,
    translation = OCEnableSetNameColor,
}

option OmiChat.EnableSetSpeechColor
{
    type = boolean,
    default = true,
    page = OmiChat,
    translation = OCEnableSetSpeechColor,
}

option OmiChat.EnableSpeechColorAsDefaultNameColor
{
    type = boolean,
    default = true,
    page = OmiChat,
    translation = OCEnableSpeechColorAsDefaultNameColor,
}

option OmiChat.EnableFactionColorAsDefault
{
    type = boolean,
    default = false,
    page = OmiChat,
    translation = OCEnableFactionColorAsDefault,
}

option OmiChat.EnableCaseInsensitiveChatStreams
{
    type = boolean,
    default = true,
    page = OmiChat,
    translation = OCEnableCaseInsensitiveChatStreams,
}

option OmiChat.EnableCharacterCustomization
{
    type = boolean,
    default = false,
    page = OmiChat,
    translation = OCEnableCharacterCustomization,
}

option OmiChat.EnableCleanCharacter
{
    type = enum,
    numValues = 3,
    default = 3,
    page = OmiChat,
    translation = OCEnableCleanCharacter,
    valueTranslation = OCEnableCleanCharacter,
}

option OmiChat.EnableSetName
{
    type = enum,
    numValues = 6,
    default = 2,
    page = OmiChat,
    translation = OCEnableSetName,
    valueTranslation = OCEnableSetName,
}

option OmiChat.EnableDiscordColorOption
{
    type = enum,
    numValues = 3,
    default = 3,
    page = OmiChat,
    translation = OCEnableDiscordColorOption,
    valueTranslation = OCEnableDiscordColorOption,
}

option OmiChat.CardItems
{
    type = string,
    default = CardDeck,
    page = OmiChat,
    translation = OCCardItems,
}

option OmiChat.DiceItems
{
    type = string,
    default = Dice,
    page = OmiChat,
    translation = OCDiceItems,
}

option OmiChat.CoinItems
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCCoinItems,
}

option OmiChat.PatternNarrativeCustomTag
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCPatternNarrativeCustomTag,
}


/* Compatibility Feature Flags */
option OmiChat.EnableCompatBuffyRPGSystem
{
    type = enum,
    numValues = 3,
    default = 2,
    page = OmiChat,
    translation = OCEnableCompatBuffyRPGSystem,
    valueTranslation = OCCompatOptionValue,
}

option OmiChat.EnableCompatChatBubble
{
    type = enum,
    numValues = 3,
    default = 3,
    page = OmiChat,
    translation = OCEnableCompatChatBubble,
    valueTranslation = OCCompatOptionValue,
}

option OmiChat.EnableCompatSearchPlayers
{
    type = enum,
    numValues = 3,
    default = 3,
    page = OmiChat,
    translation = OCEnableCompatSearchPlayers,
    valueTranslation = OCCompatOptionValue,
}

option OmiChat.EnableCompatTAD
{
    type = enum,
    numValues = 3,
    default = 3,
    page = OmiChat,
    translation = OCEnableCompatTAD,
    valueTranslation = OCCompatOptionValue,
}


/* Limits */
option OmiChat.BuffCooldown
{
    type = integer,
    default = 15,
    min = 0,
    max = 1440,
    page = OmiChat,
    translation = OCBuffCooldown,
}

option OmiChat.MaximumCustomShouts
{
    type = integer,
    default = 10,
    min = 1,
    max = 20,
    page = OmiChat,
    translation = OCMaximumCustomShouts,
}

option OmiChat.CustomShoutMaxLength
{
    type = integer,
    default = 50,
    min = 1,
    max = 200,
    page = OmiChat,
    translation = OCCustomShoutMaxLength,
}

option OmiChat.MinimumCommandAccessLevel
{
    type = integer,
    default = 16,
    min = 1,
    max = 32,
    page = OmiChat,
    translation = OCMinimumCommandAccessLevel,
}


/* Ranges */
option OmiChat.RangeCallout
{
    type = integer,
    default = 60,
    min = 1,
    max = 60,
    page = OmiChat,
    translation = OCRangeCallout,
}

option OmiChat.RangeSneakCallout
{
    type = integer,
    default = 6,
    min = 1,
    max = 60,
    page = OmiChat,
    translation = OCRangeSneakCallout,
}

option OmiChat.RangeCalloutZombies
{
    type = integer,
    default = 30,
    min = 1,
    max = 60,
    page = OmiChat,
    translation = OCRangeCalloutZombies,
}

option OmiChat.RangeSneakCalloutZombies
{
    type = integer,
    default = 6,
    min = 1,
    max = 60,
    page = OmiChat,
    translation = OCRangeSneakCalloutZombies,
}

option OmiChat.RangeMultiplierZombies
{
    type = double,
    default = 0,
    min = 0,
    max = 10.0,
    page = OmiChat,
    translation = OCRangeMultiplierZombies,
}

option OmiChat.RangeDo
{
    type = integer,
    default = 30,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeDo,
}

option OmiChat.RangeDoLoud
{
    type = integer,
    default = 60,
    min = 1,
    max = 60,
    page = OmiChat,
    translation = OCRangeDoLoud,
}

option OmiChat.RangeDoQuiet
{
    type = integer,
    default = 3,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeDoQuiet,
}

option OmiChat.RangeOoc
{
    type = integer,
    default = 30,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeOoc,
}

option OmiChat.RangeMe
{
    type = integer,
    default = 30,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeMe,
}

option OmiChat.RangeMeLoud
{
    type = integer,
    default = 60,
    min = 1,
    max = 60,
    page = OmiChat,
    translation = OCRangeMeLoud,
}

option OmiChat.RangeMeQuiet
{
    type = integer,
    default = 3,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeMeQuiet,
}

option OmiChat.RangeSay
{
    type = integer,
    default = 30,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeSay,
}

option OmiChat.RangeLow
{
    type = integer,
    default = 5,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeLow,
}

option OmiChat.RangeWhisper
{
    type = integer,
    default = 2,
    min = 1,
    max = 30,
    page = OmiChat,
    translation = OCRangeWhisper,
}

option OmiChat.RangeYell
{
    type = integer,
    default = 60,
    min = 1,
    max = 60,
    page = OmiChat,
    translation = OCRangeYell,
}

option OmiChat.RangeVertical
{
    type = string,
    default = @($sneakCallout:1;$index(@(@(shout;meloud;doloud):3;@(whisper;low;mequiet;doquiet):1) $stream 2)),
    page = OmiChat,
    translation = OCRangeVertical,
}


/* Default Colors */
option OmiChat.ColorDiscord
{
    type = string,
    default = 144 137 218,
    page = OmiChat,
    translation = OCColorDiscord,
}

option OmiChat.ColorRadio
{
    type = string,
    default = 178 178 178,
    page = OmiChat,
    translation = OCColorRadio,
}

option OmiChat.ColorServer
{
    type = string,
    default = 0 128 255,
    page = OmiChat,
    translation = OCColorServer,
}

option OmiChat.ColorAdmin
{
    type = string,
    default = 255 255 255,
    page = OmiChat,
    translation = OCColorAdmin,
}

option OmiChat.ColorGeneral
{
    type = string,
    default = 255 165 0,
    page = OmiChat,
    translation = OCColorGeneral,
}

option OmiChat.ColorDo
{
    type = string,
    default = 130 130 130,
    page = OmiChat,
    translation = OCColorDo,
}

option OmiChat.ColorDoLoud
{
    type = string,
    default = 255 51 51,
    page = OmiChat,
    translation = OCColorDoLoud,
}

option OmiChat.ColorDoQuiet
{
    type = string,
    default = 85 48 139,
    page = OmiChat,
    translation = OCColorDoQuiet,
}

option OmiChat.ColorFaction
{
    type = string,
    default = 22 113 20,
    page = OmiChat,
    translation = OCColorFaction,
}

option OmiChat.ColorOoc
{
    type = string,
    default = 48 128 128,
    page = OmiChat,
    translation = OCColorOoc,
}

option OmiChat.ColorMe
{
    type = string,
    default = 130 130 130,
    page = OmiChat,
    translation = OCColorMe,
}

option OmiChat.ColorMeLoud
{
    type = string,
    default = 255 51 51,
    page = OmiChat,
    translation = OCColorMeLoud,
}

option OmiChat.ColorMeQuiet
{
    type = string,
    default = 85 48 139,
    page = OmiChat,
    translation = OCColorMeQuiet,
}

option OmiChat.ColorPrivate
{
    type = string,
    default = 85 26 139,
    page = OmiChat,
    translation = OCColorPrivate,
}

option OmiChat.ColorSafehouse
{
    type = string,
    default = 55 148 53,
    page = OmiChat,
    translation = OCColorSafehouse,
}

option OmiChat.ColorSay
{
    type = string,
    default = 255 255 255,
    page = OmiChat,
    translation = OCColorSay,
}

option OmiChat.ColorLow
{
    type = string,
    default = 85 48 139,
    page = OmiChat,
    translation = OCColorLow,
}

option OmiChat.ColorWhisper
{
    type = string,
    default = 85 48 139,
    page = OmiChat,
    translation = OCColorWhisper,
}

option OmiChat.ColorYell
{
    type = string,
    default = 255 51 51,
    page = OmiChat,
    translation = OCColorYell,
}


/* Filters & Predicates */
option OmiChat.FilterChatInput
{
    type = string,
    default = $trim($input),
    page = OmiChat,
    translation = OCFilterChatInput,
}

option OmiChat.FilterNickname
{
    type = string,
    default = $sub($input 1 50),
    page = OmiChat,
    translation = OCFilterNickname,
}

option OmiChat.FilterNarrativeStyle
{
    type = string,
    default = @($sneakCallout:$input;$capitalize($input)),
    page = OmiChat,
    translation = OCFilterNarrativeStyle,
}

option OmiChat.PredicateEnableStream
{
    type = string,
    default = true,
    page = OmiChat,
    translation = OCPredicateEnableStream,
}

option OmiChat.PredicateAllowChatInput
{
    type = string,
    default = true,
    page = OmiChat,
    translation = OCPredicateAllowChatInput,
}

option OmiChat.PredicateAllowLanguage
{
    type = string,
    default = $has(@(say;shout;whisper;low;faction;safehouse) $stream),
    page = OmiChat,
    translation = OCPredicateAllowLanguage,
}

option OmiChat.PredicateApplyBuff
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCPredicateApplyBuff,
}

option OmiChat.PredicateAttractZombies
{
    type = string,
    default = $has(@(say;shout;meloud;doloud) $stream),
    page = OmiChat,
    translation = OCPredicateAttractZombies,
}

option OmiChat.PredicateShowTypingIndicator
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCPredicateShowTypingIndicator,
}

option OmiChat.PredicateTransmitOverRadio
{
    type = string,
    default = $any($has(@(whisper;low) $customStream) $not($customStream)),
    page = OmiChat,
    translation = OCPredicateTransmitOverRadio,
}

option OmiChat.PredicateUseNarrativeStyle
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCPredicateUseNarrativeStyle,
}

option OmiChat.PredicateUseNameColor
{
    type = string,
    default = $eq($stream say),
    page = OmiChat,
    translation = OCPredicateUseNameColor,
}


/* Languages */
option OmiChat.AvailableLanguages
{
    type = string,
    default = English;French;Italian;German;Spanish;Danish;Dutch;Hungarian;Norwegian;Polish;Portuguese;Russian;Turkish;Japanese;Mandarin;Finnish;Korean;Thai;Ukrainian;ASL,
    page = OmiChat,
    translation = OCAvailableLanguages,
}

option OmiChat.SignedLanguages
{
    type = string,
    default = ASL,
    page = OmiChat,
    translation = OCSignedLanguages,
}

option OmiChat.AddLanguageAllowlist
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCAddLanguageAllowlist,
}

option OmiChat.AddLanguageBlocklist
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCAddLanguageBlocklist,
}

option OmiChat.LanguageSlots
{
    type = integer,
    default = 1,
    min = 1,
    max = 50,
    page = OmiChat,
    translation = OCLanguageSlots,
}

option OmiChat.InterpretationRolls
{
    type = integer,
    default = 2,
    min = 0,
    max = 100,
    page = OmiChat,
    translation = OCInterpretationRolls,
}

option OmiChat.InterpretationChance
{
    type = integer,
    default = 25,
    min = 0,
    max = 100,
    page = OmiChat,
    translation = OCInterpretationChance,
}


/* Component Formats */
option OmiChat.FormatAliases
{
    type = string,
    default = @(shout:shout;quiet:low),
    page = OmiChat,
    translation = OCFormatAliases,
}

option OmiChat.FormatInfo
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCFormatInfo,
}

option OmiChat.FormatName
{
    type = string,
    default = $ifelse($has(@(general;admin;whisper) $chatType) $username @($name;$forename)),
    page = OmiChat,
    translation = OCFormatName,
}

option OmiChat.FormatTag
{
    type = string,
    default = [$tag],
    page = OmiChat,
    translation = OCFormatTag,
}

option OmiChat.FormatTimestamp
{
    type = string,
    default = [$ifelse($eq($hourFormat 12) $h $HH):$mm],
    page = OmiChat,
    translation = OCFormatTimestamp,
}

option OmiChat.FormatMenuName
{
    type = string,
    default = $ifelse($neq($menuType mini_scoreboard) $name $username &#32;[ $name ]),
    page = OmiChat,
    translation = OCFormatMenuName,
}

option OmiChat.FormatTyping
{
    type = string,
    default = $fmttyping($names $alt),
    page = OmiChat,
    translation = OCFormatTyping,
}

option OmiChat.FormatCard
{
    type = string,
    default = draws $card,
    page = OmiChat,
    translation = OCFormatCard,
}

option OmiChat.FormatRoll
{
    type = string,
    default = rolls $roll on a $sides-sided die,
    page = OmiChat,
    translation = OCFormatRoll,
}

option OmiChat.FormatFlip
{
    type = string,
    default = flips a coin and gets @($heads:heads;tails),
    page = OmiChat,
    translation = OCFormatFlip,
}

option OmiChat.FormatAdminIcon
{
    type = string,
    default = Item_Sledgehamer,
    page = OmiChat,
    translation = OCFormatAdminIcon,
}

option OmiChat.FormatIcon
{
    type = string,
    default = @($eq($stream card):Item_CardDeck;$any($buffyRoll $eq($stream roll)):Item_Dice;$has(@(say;shout;whisper;faction;safehouse;ooc;general) $stream):@($adminIcon;$icon)),
    page = OmiChat,
    translation = OCFormatIcon,
}

option OmiChat.FormatLanguage
{
    type = string,
    default = $if($all($language $not($unknownLanguage)) [$language]( <SPACE> )),
    page = OmiChat,
    translation = OCFormatLanguage,
}

option OmiChat.FormatOverheadPrefix
{
    type = string,
    default = $concats(( ) $index(@(low:[Low];whisper:[Whisper]) $stream) $if($languageRaw [$languageRaw]))&#32;,
    page = OmiChat,
    translation = OCFormatOverheadPrefix,
}

option OmiChat.FormatChatPrefix
{
    type = string,
    default = $if($icon $icon <SPACE>)$if($neq($stream server) $timestamp)$tag$language$if($buffyCrit $buffyCrit ( <SPACE>)),
    page = OmiChat,
    translation = OCFormatChatPrefix,
}

option OmiChat.FormatNarrativeDialogueTag
{
    type = string,
    default = @($sneakCallout:hisses;$eq($stream shout):shouts;$eq($stream whisper):whispers;$endswith($input ?):asks;$endswith($input !):exclaims;$endswith($input ..):says;$lt($len($input) 10):states;says),
    page = OmiChat,
    translation = OCFormatNarrativeDialogueTag,
}

option OmiChat.FormatNarrativePunctuation
{
    type = string,
    default = $unless($sneakCallout @($eq($stream shout):!;.)),
    page = OmiChat,
    translation = OCFormatNarrativePunctuation,
}


/* Overhead Message Formats */
option OmiChat.OverheadFormatFull
{
    type = string,
    default = $prefix$1,
    page = OmiChat,
    translation = OCOverheadFormatFull,
}

option OmiChat.OverheadFormatDo
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCOverheadFormatDo,
}

option OmiChat.OverheadFormatDoLoud
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCOverheadFormatDoLoud,
}

option OmiChat.OverheadFormatDoQuiet
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCOverheadFormatDoQuiet,
}

option OmiChat.OverheadFormatEcho
{
    type = string,
    default = (Over Radio) $1,
    page = OmiChat,
    translation = OCOverheadFormatEcho,
}

option OmiChat.OverheadFormatOoc
{
    type = string,
    default = (( $1 )),
    page = OmiChat,
    translation = OCOverheadFormatOoc,
}

option OmiChat.OverheadFormatMe
{
    type = string,
    default = << $1 >>,
    page = OmiChat,
    translation = OCOverheadFormatMe,
}

option OmiChat.OverheadFormatMeLoud
{
    type = string,
    default = << $1 >>,
    page = OmiChat,
    translation = OCOverheadFormatMeLoud,
}

option OmiChat.OverheadFormatMeQuiet
{
    type = string,
    default = << $1 >>,
    page = OmiChat,
    translation = OCOverheadFormatMeQuiet,
}

option OmiChat.OverheadFormatLow
{
    type = string,
    default = $1,
    page = OmiChat,
    translation = OCOverheadFormatLow,
}

option OmiChat.OverheadFormatWhisper
{
    type = string,
    default = $1,
    page = OmiChat,
    translation = OCOverheadFormatWhisper,
}

option OmiChat.OverheadFormatCard
{
    type = string,
    default = << $1 >>,
    page = OmiChat,
    translation = OCOverheadFormatCard,
}

option OmiChat.OverheadFormatRoll
{
    type = string,
    default = << $1 >>,
    page = OmiChat,
    translation = OCOverheadFormatRoll,
}

option OmiChat.OverheadFormatFlip
{
    type = string,
    default = << $1 >>,
    page = OmiChat,
    translation = OCOverheadFormatFlip,
}

option OmiChat.OverheadFormatOther
{
    type = string,
    default = $1,
    page = OmiChat,
    translation = OCOverheadFormatOther,
}


/* Chat Message Formats */
option OmiChat.ChatFormatFull
{
    type = string,
    default = $prefix$content,
    page = OmiChat,
    translation = OCChatFormatFull,
}

option OmiChat.ChatFormatDiscord
{
    type = string,
    default = $author: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatDiscord,
}

option OmiChat.ChatFormatIncomingPrivate
{
    type = string,
    default = $fmtpmfrom($name 1): <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatIncomingPrivate,
}

option OmiChat.ChatFormatOutgoingPrivate
{
    type = string,
    default = $fmtpmto($recipientName 1): <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatOutgoingPrivate,
}

option OmiChat.ChatFormatServer
{
    type = string,
    default = $message,
    page = OmiChat,
    translation = OCChatFormatServer,
}

option OmiChat.ChatFormatRadio
{
    type = string,
    default = $fmtradio($frequency): <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatRadio,
}

option OmiChat.ChatFormatAdmin
{
    type = string,
    default = $name: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatAdmin,
}

option OmiChat.ChatFormatCard
{
    type = string,
    default = $fmtrp(<SPACE> $name <SPACE> $punctuate($fmtcard($card)) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatCard,
}

option OmiChat.ChatFormatRoll
{
    type = string,
    default = $fmtrp(<SPACE> $name <SPACE> $punctuate($fmtroll($roll $sides)) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatRoll,
}

option OmiChat.ChatFormatFlip
{
    type = string,
    default = $fmtrp(<SPACE> $name <SPACE> $punctuate($fmtflip($heads)) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatFlip,
}

option OmiChat.ChatFormatDo
{
    type = string,
    default = $fmtrp(<SPACE> $punctuate($capitalize($trim($message))) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatDo,
}

option OmiChat.ChatFormatDoLoud
{
    type = string,
    default = $fmtrp(<SPACE> $punctuate($capitalize($trim($message))) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatDoLoud,
}

option OmiChat.ChatFormatDoQuiet
{
    type = string,
    default = $fmtrp(<SPACE> $punctuate($capitalize($trim($message))) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatDoQuiet,
}

option OmiChat.ChatFormatGeneral
{
    type = string,
    default = $name: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatGeneral,
}

option OmiChat.ChatFormatOoc
{
    type = string,
    default = $name: <SPACE> (( $message )),
    page = OmiChat,
    translation = OCChatFormatOoc,
}

option OmiChat.ChatFormatMe
{
    type = string,
    default = $fmtrp(<SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatMe,
}

option OmiChat.ChatFormatMeLoud
{
    type = string,
    default = $fmtrp(<SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatMeLoud,
}

option OmiChat.ChatFormatMeQuiet
{
    type = string,
    default = $fmtrp(<SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatMeQuiet,
}

option OmiChat.ChatFormatSafehouse
{
    type = string,
    default = $name: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatSafehouse,
}

option OmiChat.ChatFormatSay
{
    type = string,
    default = $name$unless($buffyRoll :) <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatSay,
}

option OmiChat.ChatFormatFaction
{
    type = string,
    default = $name: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatFaction,
}

option OmiChat.ChatFormatLow
{
    type = string,
    default = $name: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatLow,
}

option OmiChat.ChatFormatWhisper
{
    type = string,
    default = $name: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatWhisper,
}

option OmiChat.ChatFormatYell
{
    type = string,
    default = $name: <SPACE> $message,
    page = OmiChat,
    translation = OCChatFormatYell,
}

option OmiChat.ChatFormatEcho
{
    type = string,
    default =,
    page = OmiChat,
    translation = OCChatFormatEcho,
}

option OmiChat.ChatFormatUnknownLanguage
{
    type = string,
    default = $fmtrp(<SPACE> $name <SPACE> $getunknownlanguagestring($languageRaw $stream) <SPACE>),
    page = OmiChat,
    translation = OCChatFormatUnknownLanguage,
}

option OmiChat.ChatFormatUnknownLanguageRadio
{
    type = string,
    default = $fmtradio($frequency): $fmtrp($getunknownlanguagestring($languageRaw $stream)),
    page = OmiChat,
    translation = OCChatFormatUnknownLanguageRadio,
}
