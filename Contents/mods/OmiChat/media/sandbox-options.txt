VERSION = 1,


/* Feature Flags */
option OmiChat.EnableCustomShouts
{ type = boolean, default = true, page = OmiChat, translation = OCEnableCustomShouts, }

option OmiChat.EnableCustomSneakShouts
{ type = boolean, default = true, page = OmiChat, translation = OCEnableCustomSneakShouts, }

option OmiChat.EnableEmotes
{ type = boolean, default = true, page = OmiChat, translation = OCEnableEmotes, }

option OmiChat.EnableSetName
{ type = boolean, default = true, page = OmiChat, translation = OCEnableSetName, }

option OmiChat.EnableChatNameAsCharacterName
{ type = boolean, default = false, page = OmiChat, translation = OCEnableChatNameAsCharacterName, }

option OmiChat.EnableSetNameColor
{ type = boolean, default = false, page = OmiChat, translation = OCEnableSetNameColor, }

option OmiChat.EnableSetSpeechColor
{ type = boolean, default = true, page = OmiChat, translation = OCEnableSetSpeechColor, }

option OmiChat.EnableSpeechColorAsDefaultNameColor
{ type = boolean, default = true, page = OmiChat, translation = OCEnableSpeechColorAsDefaultNameColor, }

option OmiChat.EnableFactionColorAsDefault
{ type = boolean, default = false, page = OmiChat, translation = OCEnableFactionColorAsDefault, }

option OmiChat.EnableIconPicker
{ type = boolean, default = false, page = OmiChat, translation = OCEnableIconPicker, }

option OmiChat.EnableMiscellaneousIcons
{ type = boolean, default = false, page = OmiChat, translation = OCEnableMiscellaneousIcons, }


/* Compatibility Feature Flags */
option OmiChat.EnableCompatTAD
{ type = boolean, default = true, page = OmiChat, translation = OCEnableCompatTAD, }


/* Limits */
option OmiChat.CustomShoutMaxLength
{ type = integer, default = 30, min = 1, max = 200, page = OmiChat, translation = OCCustomShoutMaxLength, }

option OmiChat.MinimumCommandAccessLevel
{ type = integer, default = 16, min = 1, max = 32, page = OmiChat, translation = OCMinimumCommandAccessLevel, }

option OmiChat.MaximumCustomShouts
{ type = integer, default = 10, min = 1, max = 20, page = OmiChat, translation = OCMaximumCustomShouts, }


/* Ranges */
option OmiChat.RangeCallout
{ type = integer, default = 60, min = 1, max = 60, page = OmiChat, translation = OCRangeCallout, }

option OmiChat.RangeSneakCallout
{ type = integer, default = 6, min = 1, max = 60, page = OmiChat, translation = OCRangeSneakCallout, }

option OmiChat.RangeCalloutZombies
{ type = integer, default = 30, min = 1, max = 60, page = OmiChat, translation = OCRangeCalloutZombies, }

option OmiChat.RangeSneakCalloutZombies
{ type = integer, default = 6, min = 1, max = 60, page = OmiChat, translation = OCRangeSneakCalloutZombies, }

option OmiChat.RangeMultiplierZombies
{ type = double, default = 0, min = 0, max = 10.0, page = OmiChat, translation = OCRangeMultiplierZombies, }

option OmiChat.RangeDo
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCRangeDo, }

option OmiChat.RangeDoLoud
{ type = integer, default = 60, min = 1, max = 60, page = OmiChat, translation = OCRangeDoLoud, }

option OmiChat.RangeDoQuiet
{ type = integer, default = 3, min = 1, max = 30, page = OmiChat, translation = OCRangeDoQuiet, }

option OmiChat.RangeLooc
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCRangeLooc, }

option OmiChat.RangeMe
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCRangeMe, }

option OmiChat.RangeMeLoud
{ type = integer, default = 60, min = 1, max = 60, page = OmiChat, translation = OCRangeMeLoud, }

option OmiChat.RangeMeQuiet
{ type = integer, default = 3, min = 1, max = 30, page = OmiChat, translation = OCRangeMeQuiet, }

option OmiChat.RangeSay
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCRangeSay, }

option OmiChat.RangeWhisper
{ type = integer, default = 3, min = 1, max = 30, page = OmiChat, translation = OCRangeWhisper, }

option OmiChat.RangeYell
{ type = integer, default = 60, min = 1, max = 60, page = OmiChat, translation = OCRangeYell, }


/* Default Colors */
option OmiChat.ColorDiscord
{ type = string, default = 144 137 218, page = OmiChat, translation = OCColorDiscord, }

option OmiChat.ColorRadio
{ type = string, default = 178 178 178, page = OmiChat, translation = OCColorRadio, }

option OmiChat.ColorServer
{ type = string, default = 0 128 255, page = OmiChat, translation = OCColorServer, }

option OmiChat.ColorAdmin
{ type = string, default = 255 255 255, page = OmiChat, translation = OCColorAdmin, }

option OmiChat.ColorGeneral
{ type = string, default = 255 165 0, page = OmiChat, translation = OCColorGeneral, }

option OmiChat.ColorDo
{ type = string, default = 130 130 130, page = OmiChat, translation = OCColorDo, }

option OmiChat.ColorDoLoud
{ type = string, default = 255 51 51, page = OmiChat, translation = OCColorDoLoud, }

option OmiChat.ColorDoQuiet
{ type = string, default = 85 48 139, page = OmiChat, translation = OCColorDoQuiet, }

option OmiChat.ColorFaction
{ type = string, default = 22 113 20, page = OmiChat, translation = OCColorFaction, }

option OmiChat.ColorLooc
{ type = string, default = 48 128 128, page = OmiChat, translation = OCColorLooc, }

option OmiChat.ColorMe
{ type = string, default = 130 130 130, page = OmiChat, translation = OCColorMe, }

option OmiChat.ColorMeLoud
{ type = string, default = 255 51 51, page = OmiChat, translation = OCColorMeLoud, }

option OmiChat.ColorMeQuiet
{ type = string, default = 85 48 139, page = OmiChat, translation = OCColorMeQuiet, }

option OmiChat.ColorPrivate
{ type = string, default = 85 26 139, page = OmiChat, translation = OCColorPrivate, }

option OmiChat.ColorSafehouse
{ type = string, default = 55 148 53, page = OmiChat, translation = OCColorSafehouse, }

option OmiChat.ColorSay
{ type = string, default = 255 255 255, page = OmiChat, translation = OCColorSay, }

option OmiChat.ColorWhisper
{ type = string, default = 85 48 139, page = OmiChat, translation = OCColorWhisper, }

option OmiChat.ColorYell
{ type = string, default = 255 51 51, page = OmiChat, translation = OCColorYell, }


/* Filters & Predicates */
option OmiChat.FilterNickname
{ type = string, default = $sub($name 1 50), page = OmiChat, translation = OCFilterNickname, }

option OmiChat.PredicateAllowLanguage
{ type = string, default = $has(@(say;shout;whisper) $stream), page = OmiChat, translation = OCPredicateAllowLanguage, }

option OmiChat.PredicateUseNameColor
{ type = string, default = $eq($stream say), page = OmiChat, translation = OCPredicateUseNameColor, }


/* Languages */
option OmiChat.AvailableLanguages {
    type = string,
    default = English;French;Italian;German;Spanish;Danish;Dutch;Hungarian;Norwegian;Polish;Portuguese;Russian;Turkish;Japanese;Mandarin;Finnish;Korean;Thai;Ukrainian;ASL,
    page = OmiChat,
    translation = OCAvailableLanguages,
}

option OmiChat.SignedLanguages
{ type = string, default = ASL, page = OmiChat, translation = OCSignedLanguages, }

option OmiChat.LanguageSlots
{ type = integer, default = 1, min = 1, max = 32, page = OmiChat, translation = OCLanguageSlots, }

/* Component Formats */
option OmiChat.FormatInfo
{ type = string, default =, page = OmiChat, translation = OCFormatInfo, }

option OmiChat.FormatName
{ type = string, default = $ifelse($has(@(general;admin;whisper) $chatType) $username @($name;$forename)), page = OmiChat, translation = OCFormatName, }

option OmiChat.FormatTag
{ type = string, default = [$tag]$if($eq($chatType server) :&#32;<SPACE>&#32;), page = OmiChat, translation = OCFormatTag, }

option OmiChat.FormatTimestamp
{ type = string, default = [$ifelse($eq($hourFormatPref 12) $h $H):$mm], page = OmiChat, translation = OCFormatTimestamp, }

option OmiChat.FormatMenuName
{ type = string, default = $ifelse($neq($menuType mini_scoreboard) $name $username &#32;[ $name ]), page = OmiChat, translation = OCFormatMenuName, }

option OmiChat.FormatCard
{ type = string, default = $gettext(UI_OmiChat_card_local $card), page = OmiChat, translation = OCFormatCard, }

option OmiChat.FormatRoll
{ type = string, default = $gettext(UI_OmiChat_roll_local $roll $sides), page = OmiChat, translation = OCFormatRoll, }


/* Overhead Message Formats */
option OmiChat.OverheadFormatFull
{ type = string, default = $set(_whisper $eq($stream whisper))@($_whisper:[Whispering)$if($languageRaw @($_whisper:( in);[In)&#32;$languageRaw)@($any($languageRaw $_whisper):]&#32;)$1, page = OmiChat, translation = OCOverheadFormatFull, }

option OmiChat.OverheadFormatDo
{ type = string, default =, page = OmiChat, translation = OCOverheadFormatDo, }

option OmiChat.OverheadFormatDoLoud
{ type = string, default =, page = OmiChat, translation = OCOverheadFormatDoLoud, }

option OmiChat.OverheadFormatDoQuiet
{ type = string, default =, page = OmiChat, translation = OCOverheadFormatDoQuiet, }

option OmiChat.OverheadFormatLooc
{ type = string, default = (( $1 )), page = OmiChat, translation = OCOverheadFormatLooc, }

option OmiChat.OverheadFormatMe
{ type = string, default = $gettext(UI_OmiChat_rp_emote $1), page = OmiChat, translation = OCOverheadFormatMe, }

option OmiChat.OverheadFormatMeLoud
{ type = string, default = $gettext(UI_OmiChat_rp_emote $1), page = OmiChat, translation = OCOverheadFormatMeLoud, }

option OmiChat.OverheadFormatMeQuiet
{ type = string, default = $gettext(UI_OmiChat_rp_emote $1), page = OmiChat, translation = OCOverheadFormatMeQuiet, }

option OmiChat.OverheadFormatWhisper
{ type = string, default = $1, page = OmiChat, translation = OCOverheadFormatWhisper, }

option OmiChat.OverheadFormatCard
{ type = string, default = $gettext(UI_OmiChat_rp_emote $1), page = OmiChat, translation = OCOverheadFormatCard, }

option OmiChat.OverheadFormatRoll
{ type = string, default = $gettext(UI_OmiChat_rp_emote $1), page = OmiChat, translation = OCOverheadFormatRoll, }


/* Chat Message Formats */
option OmiChat.ChatFormatFull
{ type = string, default = $if($neq($stream server) $timestamp)$tag$if($all($language $not($unknownLanguage)) [$language]&#32;<SPACE>&#32;)$content, page = OmiChat, translation = OCChatFormatFull, }

option OmiChat.ChatFormatDiscord
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCChatFormatDiscord, }

option OmiChat.ChatFormatIncomingPrivate
{ type = string, default = $($gettext(UI_OmiChat_private_chat_from $name)$): <SPACE> $message, page = OmiChat, translation = OCChatFormatIncomingPrivate, }

option OmiChat.ChatFormatOutgoingPrivate
{ type = string, default = $($gettext(UI_OmiChat_private_chat_to $recipientName)$): <SPACE> $message, page = OmiChat, translation = OCChatFormatOutgoingPrivate, }

option OmiChat.ChatFormatServer
{ type = string, default = $message, page = OmiChat, translation = OCChatFormatServer, }

option OmiChat.ChatFormatRadio
{ type = string, default = $gettext(UI_OmiChat_radio $frequency): <SPACE> $message, page = OmiChat, translation = OCChatFormatRadio, }

option OmiChat.ChatFormatAdmin
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatAdmin, }

option OmiChat.ChatFormatCard
{ type = string, default = &#32;<IMAGE:Item_CardDeck&#44;15&#44;14> <SPACE> $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>)), page = OmiChat, translation = OCChatFormatCard, }

option OmiChat.ChatFormatRoll
{ type = string, default = &#32;<IMAGE:Item_Dice&#44;15&#44;14> <SPACE> $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>)), page = OmiChat, translation = OCChatFormatRoll, }

option OmiChat.ChatFormatDo
{ type = string, default = $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $punctuate($capitalize($trim($message))) <SPACE>)), page = OmiChat, translation = OCChatFormatDo, }

option OmiChat.ChatFormatDoLoud
{ type = string, default = $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $punctuate($capitalize($trim($message))) <SPACE>)), page = OmiChat, translation = OCChatFormatDoLoud, }

option OmiChat.ChatFormatDoQuiet
{ type = string, default = $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $punctuate($capitalize($trim($message))) <SPACE>)), page = OmiChat, translation = OCChatFormatDoQuiet, }

option OmiChat.ChatFormatGeneral
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatGeneral, }

option OmiChat.ChatFormatLooc
{ type = string, default = $name: <SPACE> (( $message )), page = OmiChat, translation = OCChatFormatLooc, }

option OmiChat.ChatFormatMe
{ type = string, default = $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>)), page = OmiChat, translation = OCChatFormatMe, }

option OmiChat.ChatFormatMeLoud
{ type = string, default = $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>)), page = OmiChat, translation = OCChatFormatMeLoud, }

option OmiChat.ChatFormatMeQuiet
{ type = string, default = $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE>)), page = OmiChat, translation = OCChatFormatMeQuiet, }

option OmiChat.ChatFormatSafehouse
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatSafehouse, }

option OmiChat.ChatFormatSay
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatSay, }

option OmiChat.ChatFormatFaction
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatFaction, }

option OmiChat.ChatFormatWhisper
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatWhisper, }

option OmiChat.ChatFormatYell
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatYell, }

option OmiChat.ChatFormatUnknownLanguage
{ type = string, default = $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $name <SPACE> $gettext($unknownLanguageString $language) <SPACE>)), page = OmiChat, translation = OCChatFormatUnknownLanguage, }

option OmiChat.ChatFormatUnknownLanguageRadio
{ type = string, default = $gettext(UI_OmiChat_radio $frequency): $gettext(UI_OmiChat_rp_emote $concats(( ) <SPACE> $gettext($unknownLanguageString $language) <SPACE>)), page = OmiChat, translation = OCChatFormatUnknownLanguageRadio, }
