VERSION = 1,


/* Feature Flags */
option OmiChat.AllowCustomShouts
{ type = boolean, default = true, page = OmiChat, translation = OCAllowCustomShouts, }

option OmiChat.AllowCustomSneakShouts
{ type = boolean, default = true, page = OmiChat, translation = OCAllowCustomSneakShouts, }

option OmiChat.AllowEmotes
{ type = boolean, default = true, page = OmiChat, translation = OCAllowEmotes, }

option OmiChat.AllowSetName
{ type = boolean, default = true, page = OmiChat, translation = OCAllowSetName, }

option OmiChat.AllowSetNameColor
{ type = boolean, default = false, page = OmiChat, translation = OCAllowSetNameColor, }

option OmiChat.UseNameColorInAllChats
{ type = boolean, default = false, page = OmiChat, translation = OCUseNameColorInAllChats, }

option OmiChat.UseSpeechColorAsDefaultNameColor
{ type = boolean, default = true, page = OmiChat, translation = OCUseSpeechColorAsDefaultNameColor, }

option OmiChat.AllowSetSpeechColor
{ type = boolean, default = true, page = OmiChat, translation = OCAllowSetSpeechColor, }

option OmiChat.EnableEmojiPicker
{ type = boolean, default = false, page = OmiChat, translation = OCEnableEmojiPicker, }

option OmiChat.IncludeMiscellaneousEmoji
{ type = boolean, default = false, page = OmiChat, translation = OCIncludeMiscellaneousEmoji, }

option OmiChat.EnableTADCompat
{ type = boolean, default = true, page = OmiChat, translation = OCEnableTADCompat, }

option OmiChat.EnableRangedMe
{ type = boolean, default = true, page = OmiChat, translation = OCEnableRangedMe, }

option OmiChat.UppercaseCustomShouts
{ type = boolean, default = true, page = OmiChat, translation = OCUppercaseCustomShouts, }

option OmiChat.LowercaseCustomSneakShouts
{ type = boolean, default = true, page = OmiChat, translation = OCLowercaseCustomSneakShouts, }

option OmiChat.UseChatNameAsCharacterName
{ type = boolean, default = false, page = OmiChat, translation = OCUseChatNameAsCharacterName, }


/* Limits and Ranges */
option OmiChat.CustomShoutMaxLength
{ type = integer, default = 30, min = 1, max = 200, page = OmiChat, translation = OCCustomShoutMaxLength, }

option OmiChat.MaximumCustomShouts
{ type = integer, default = 10, min = 1, max = 20, page = OmiChat, translation = OCMaximumCustomShouts, }

option OmiChat.MinimumColorValue
{ type = integer, default = 48, min = 0, max = 255, page = OmiChat, translation = OCMinimumColorValue, }

option OmiChat.MaximumColorValue
{ type = integer, default = 255, min = 0, max = 255, page = OmiChat, translation = OCMaximumColorValue, }

option OmiChat.NameMaxLength
{ type = integer, default = 50, min = 0, max = 50, page = OmiChat, translation = OCNameMaxLength, }

option OmiChat.LoocRange
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCLoocRange, }

option OmiChat.MeRange
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCMeRange, }

option OmiChat.SayRange
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCSayRange, }

option OmiChat.WhisperRange
{ type = integer, default = 3, min = 1, max = 30, page = OmiChat, translation = OCWhisperRange, }

option OmiChat.ShoutRange
{ type = integer, default = 60, min = 1, max = 60, page = OmiChat, translation = OCShoutRange, }


/* Colors */
option OmiChat.LoocColor
{ type = string, default = 48 128 128, page = OmiChat, translation = OCLoocColor, }

option OmiChat.MeColor
{ type = string, default = 130 130 130, page = OmiChat, translation = OCMeColor, }

option OmiChat.WhisperColor
{ type = string, default = 85 48 139, page = OmiChat, translation = OCWhisperColor, }


/* Message Component Formats */
option OmiChat.NameFormat
{ type = string, default = $forename, page = OmiChat, translation = OCNameFormat, }

option OmiChat.TagFormat
{ type = string, default = [$tag]$if($eq($chatType server) (: <SPACE> )), page = OmiChat, translation = OCTagFormat, }

option OmiChat.TimestampFormat
{ type = string, default = [$ifelse($eq($hourFormatPref 12) $h $H):$mm], page = OmiChat, translation = OCTimestampFormat, }


/* Message Formats */
option OmiChat.LoocOverheadFormat
{ type = string, default = (( $1 )), page = OmiChat, translation = OCLoocOverheadFormat, }

option OmiChat.MeOverheadFormat
{ type = string, default = &#171; $1 &#187;, page = OmiChat, translation = OCMeOverheadFormat, }

option OmiChat.WhisperOverheadFormat
{ type = string, default = ($1), page = OmiChat, translation = OCWhisperOverheadFormat, }

option OmiChat.LoocChatFormat
{ type = string, default = $name: <SPACE> (( $message )), page = OmiChat, translation = OCLoocChatFormat, }

option OmiChat.MeChatFormat
{ type = string, default = &#171; <SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE> &#187;, page = OmiChat, translation = OCMeChatFormat, }

option OmiChat.SayChatFormat
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCSayChatFormat, }

option OmiChat.WhisperChatFormat
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCWhisperChatFormat, }

option OmiChat.ShoutChatFormat
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCShoutChatFormat, }

option OmiChat.AdminChatFormat
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCAdminChatFormat, }

option OmiChat.GeneralChatFormat
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCGeneralChatFormat, }

option OmiChat.DiscordChatFormat
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCDiscordChatFormat, }

option OmiChat.RadioChatFormat
{ type = string, default = $gettext(UI_OmiChat_radio $frequency): <SPACE> $message, page = OmiChat, translation = OCRadioChatFormat, }

option OmiChat.FactionChatFormat
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCFactionChatFormat, }

option OmiChat.SafehouseChatFormat
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCSafehouseChatFormat, }

option OmiChat.IncomingPrivateChatFormat
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCIncomingPrivateChatFormat, }

option OmiChat.OutgoingPrivateChatFormat
{ type = string, default = $gettext(UI_OmiChat_private_chat_to $recipient): <SPACE> $message, page = OmiChat, translation = OCOutgoingPrivateChatFormat, }

option OmiChat.ServerChatFormat
{ type = string, default = $message, page = OmiChat, translation = OCServerChatFormat, }

option OmiChat.MenuNameFormat
{ type = string, default = $ifelse($neq($menuType mini_scoreboard) $name $username ( [) $name ]), page = OmiChat, translation = OCMenuNameFormat, }
