VERSION = 1,


/* Feature Flags */
option OmiChat.EnableCompatTAD
{ type = boolean, default = true, page = OmiChat, translation = OCEnableCompatTAD, }

option OmiChat.EnableCustomShouts
{ type = boolean, default = true, page = OmiChat, translation = OCEnableCustomShouts, }

option OmiChat.EnableCustomSneakShouts
{ type = boolean, default = true, page = OmiChat, translation = OCEnableCustomSneakShouts, }

option OmiChat.EnableEmotes
{ type = boolean, default = true, page = OmiChat, translation = OCEnableEmotes, }

option OmiChat.EnableSetName
{ type = boolean, default = true, page = OmiChat, translation = OCEnableSetName, }

option OmiChat.EnableSetNameColor
{ type = boolean, default = false, page = OmiChat, translation = OCEnableSetNameColor, }

option OmiChat.EnableNameColorInAllChats
{ type = boolean, default = false, page = OmiChat, translation = OCEnableNameColorInAllChats, }

option OmiChat.EnableSpeechColorAsDefaultNameColor
{ type = boolean, default = true, page = OmiChat, translation = OCEnableSpeechColorAsDefaultNameColor, }

option OmiChat.EnableSetSpeechColor
{ type = boolean, default = true, page = OmiChat, translation = OCEnableSetSpeechColor, }

option OmiChat.EnableIconPicker
{ type = boolean, default = false, page = OmiChat, translation = OCEnableIconPicker, }

option OmiChat.EnableMiscellaneousIcons
{ type = boolean, default = false, page = OmiChat, translation = OCEnableMiscellaneousIcons, }

option OmiChat.EnableRangedMe
{ type = boolean, default = true, page = OmiChat, translation = OCEnableRangedMe, }

option OmiChat.EnableChatNameAsCharacterName
{ type = boolean, default = false, page = OmiChat, translation = OCEnableChatNameAsCharacterName, }


/* Limits */
option OmiChat.CustomShoutMaxLength
{ type = integer, default = 30, min = 1, max = 200, page = OmiChat, translation = OCCustomShoutMaxLength, }

option OmiChat.MaximumCustomShouts
{ type = integer, default = 10, min = 1, max = 20, page = OmiChat, translation = OCMaximumCustomShouts, }

option OmiChat.MinimumColorValue
{ type = integer, default = 48, min = 0, max = 255, page = OmiChat, translation = OCMinimumColorValue, }

option OmiChat.MaximumColorValue
{ type = integer, default = 255, min = 0, max = 255, page = OmiChat, translation = OCMaximumColorValue, }

option OmiChat.NameMaxLength
{ type = integer, default = 50, min = 0, max = 50, page = OmiChat, translation = OCNameMaxLength, }


/* Ranges */
option OmiChat.RangeLooc
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCRangeLooc, }

option OmiChat.RangeMe
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCRangeMe, }

option OmiChat.RangeSay
{ type = integer, default = 30, min = 1, max = 30, page = OmiChat, translation = OCRangeSay, }

option OmiChat.RangeWhisper
{ type = integer, default = 3, min = 1, max = 30, page = OmiChat, translation = OCRangeWhisper, }

option OmiChat.RangeYell
{ type = integer, default = 60, min = 1, max = 60, page = OmiChat, translation = OCRangeYell, }


/* Colors */
option OmiChat.ColorLooc
{ type = string, default = 48 128 128, page = OmiChat, translation = OCColorLooc, }

option OmiChat.ColorMe
{ type = string, default = 130 130 130, page = OmiChat, translation = OCColorMe, }

option OmiChat.ColorWhisper
{ type = string, default = 85 48 139, page = OmiChat, translation = OCColorWhisper, }


/* Component Formats */
option OmiChat.FormatName
{ type = string, default = $forename, page = OmiChat, translation = OCFormatName, }

option OmiChat.FormatTag
{ type = string, default = [$tag]$if($eq($chatType server) (: <SPACE> )), page = OmiChat, translation = OCFormatTag, }

option OmiChat.FormatTimestamp
{ type = string, default = [$ifelse($eq($hourFormatPref 12) $h $H):$mm], page = OmiChat, translation = OCFormatTimestamp, }

option OmiChat.FormatMenuName
{ type = string, default = $ifelse($neq($menuType mini_scoreboard) $name $username ( [) $name ]), page = OmiChat, translation = OCFormatMenuName, }


/* Overhead Message Formats */
option OmiChat.OverheadFormatLooc
{ type = string, default = (( $1 )), page = OmiChat, translation = OCOverheadFormatLooc, }

option OmiChat.OverheadFormatMe
{ type = string, default = &#171; $1 &#187;, page = OmiChat, translation = OCOverheadFormatMe, }

option OmiChat.OverheadFormatWhisper
{ type = string, default = ($1), page = OmiChat, translation = OCOverheadFormatWhisper, }


/* Chat Message Formats*/
option OmiChat.ChatFormatLooc
{ type = string, default = $name: <SPACE> (( $message )), page = OmiChat, translation = OCChatFormatLooc, }

option OmiChat.ChatFormatMe
{ type = string, default = &#171; <SPACE> $name <SPACE> $punctuate($trimright($message)) <SPACE> &#187;, page = OmiChat, translation = OCChatFormatMe, }

option OmiChat.ChatFormatSay
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatSay, }

option OmiChat.ChatFormatWhisper
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatWhisper, }

option OmiChat.ChatFormatYell
{ type = string, default = $name: <SPACE> $message, page = OmiChat, translation = OCChatFormatYell, }

option OmiChat.ChatFormatAdmin
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCChatFormatAdmin, }

option OmiChat.ChatFormatGeneral
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCChatFormatGeneral, }

option OmiChat.ChatFormatDiscord
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCChatFormatDiscord, }

option OmiChat.ChatFormatRadio
{ type = string, default = $gettext(UI_OmiChat_radio $frequency): <SPACE> $message, page = OmiChat, translation = OCChatFormatRadio, }

option OmiChat.ChatFormatFaction
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCChatFormatFaction, }

option OmiChat.ChatFormatSafehouse
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCChatFormatSafehouse, }

option OmiChat.ChatFormatIncomingPrivate
{ type = string, default = $author: <SPACE> $message, page = OmiChat, translation = OCChatFormatIncomingPrivate, }

option OmiChat.ChatFormatOutgoingPrivate
{ type = string, default = $gettext(UI_OmiChat_private_chat_to $recipient): <SPACE> $message, page = OmiChat, translation = OCChatFormatOutgoingPrivate, }

option OmiChat.ChatFormatServer
{ type = string, default = $message, page = OmiChat, translation = OCChatFormatServer, }
